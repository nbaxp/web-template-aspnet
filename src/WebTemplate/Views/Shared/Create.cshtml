@using Microsoft.Extensions.Options
@using WebTemplate.Services.OAuth
@using WebTemplate.Shared.Extensions
@using WebTemplate.Settings
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@{
    var action = Url.Action();
    var requestToken = Antiforgery.GetAndStoreTokens(Context).RequestToken;
    var model = Json.Serialize(Model);
    var errors = Json.Serialize(ViewData.ModelState.ToErrors());
    var schema = Json.Serialize(ViewData.ModelMetadata.GetSchema(ViewContext.HttpContext.RequestServices));
}

<el-card class="container">
    <div>{{errors[""]}}</div>
    <el-form ref="formRef" size="large" :model="model" label-width="240px" :rules="rules" :action="action" method="post">
        <template v-for="(value,key,index) in model">
            <template v-if="getType(key)&&getType(key)!=='hiddenInput'&&getType(key)!=='key'">
                <el-form-item :label="schema.properties[key].title" :prop="key" :error="errors[key]">
                    <el-input v-model="model[key]" v-if="getType(key).match(/^password$/i)" type="password" clearable />
                    <el-switch v-model="model[key]" v-else-if="getType(key).match(/^boolean/i)" clearable />
                    <el-input v-model="model[key]" v-else clearable />
                </el-form-item>
            </template>
        </template>
    </el-form>
    <el-button type="primary" class="width100" v-on:click="submitForm(formRef)">@T("Confirm")</el-button>
</el-card>

@section script{
    <script type="module" id="page">
        import { ref, reactive } from 'vue';
        import SvgIcon from '/components/svg-icon.js';
        import { post } from '/utils/request.js';
        import { getRules } from '/utils/validators.js';

        export default {
            components: { SvgIcon },
            setup() {
                const action = '@action';
                const requestToken = '@requestToken';
                const schema = reactive(@Html.Raw(schema));
                const model = reactive(@Html.Raw(model));
                const errors = reactive(@Html.Raw(errors));
                const getType = (name) => {
                    const meta = schema.properties[name];
                    if (meta) {
                        return meta.template ?? meta.format ?? meta.type;
                    }
                    return null;
                };
                const rules = reactive(getRules(schema));
                const formRef = ref(null);
                const submitForm = async (form) => {
                    try {
                        await form.validate();
                        const response = await post(action, model, requestToken);
                        if (response.status === 200) {
                            //for login
                            location.href = model.returnUrl ?? '/';
                        } else if (response.status == 400) {
                            //alert(await response.json());
                            Object.assign(errors, await response.json());
                        }
                    } catch (e) {
                        console.error(e);
                    }
                };
                return {
                    action,
                    requestToken,
                    schema,
                    model,
                    rules,
                    errors,
                    getType,
                    formRef,
                    submitForm
                };
            }
        };
    </script>
}
