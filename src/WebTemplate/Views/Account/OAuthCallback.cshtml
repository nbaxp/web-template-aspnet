@using Microsoft.Extensions.Options
@using WebTemplate.Services.OAuth
@using WebTemplate.Shared.Extensions
@using WebTemplate.Settings
@inject IStringLocalizer locale
@inject OAuthService oauthService
@{
    var action = Url.Action();
}

<div class="width100 height100 flex-center">
    <div>
        <div class="flex-center padding"><layout-logo /></div>
        <el-card class="container">
            <el-form ref="formRef" size="large" :model="model" style="width:300px;" label-width="80px" :rules="rules" :action="action" method="post">
                <template v-for="(value,key,index) in model">
                    <el-form-item v-if="!getMeta(key).hideSurroundingHtml" :label="getMeta(key).displayName" :prop="key" :error="errors[key]">
                        <el-input v-model="model[key]" v-if="getType(key).match(/^password$/i)" type="password" clearable />
                        <el-switch v-model="model[key]" v-else-if="getType(key).match(/^boolean/i)" clearable />
                        <el-input v-model="model[key]" v-else clearable />
                    </el-form-item>
                    <input type="hidden" v-model="model[key]" />
                </template>
            </el-form>
            <el-button type="primary" class="width100" v-on:click="submitForm(formRef)">@locale["Login"]</el-button>
            <el-divider>@locale["ExternalLogin"]</el-divider>
        </el-card>
        <div class="flex-center padding"> <layout-footer /></div>
    </div>
</div>

@section script{
    <script type="module" id="page">
        import { ref, reactive } from 'vue';
        import SvgIcon from '/components/svg-icon.js';
        import { post } from '@Url.Content("~/utils/request.js")';
        export default {
            components: { SvgIcon },
            setup() {
                console.log('@action');
                const action = "@action";
                const formRef = ref(null);
                const model = reactive(@Html.Raw(Json.Serialize(Model)));
                const errors = reactive(@Html.Raw(Json.Serialize(ViewData.ModelState.ToErrors())));
                const schema = reactive(@Html.Raw(Json.Serialize(ViewData.ModelMetadata.GetSchema(ViewContext.HttpContext.RequestServices))));
                const getMeta = (name) => schema.properties.find(o => o.name === name);
                const getType = (name) => {
                    const meta = getMeta(name);
                    return meta.templateHint ?? meta.dataTypeName ?? meta.modelType;
                };
                const getRules = (schema) => {
                    let rules = {};
                    for (const meta of schema.properties) {
                        const list = [];
                        if (meta.isRequired) {
                            list.push({ required: true, message: 'Please input Activity name', trigger: 'change' });
                        }
                        if (list.length) {
                            rules[meta.name] = list;
                        }
                    }
                    return rules;
                };
                const rules = reactive(getRules(schema));
                const submitForm = async (form) => {
                    try {
                        await form.validate();
                        const response = await post(action, model);
                        if (response.status === 200) {
                            //for login
                            location.href = model.returnUrl ?? '/';
                        } else if (response.status == 400) {
                            //alert(await response.json());
                            Object.assign(errors, await response.json());
                        }
                    } catch (e) {
                        console.error(e);
                    }
                };
                return {
                    formRef,
                    action,
                    model,
                    errors,
                    schema,
                    rules,
                    getMeta,
                    getType,
                    submitForm,
                };
            }
        };
    </script>
}
