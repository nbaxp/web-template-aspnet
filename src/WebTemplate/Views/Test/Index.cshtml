@using Microsoft.Extensions.Options
@using WebTemplate.Services.OAuth
@using WebTemplate.Shared.Extensions
@using WebTemplate.Settings
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery
@{
    var action = Url.Action();
    var requestToken = Antiforgery.GetAndStoreTokens(Context).RequestToken;
}

<div class="width100 height100 flex-center">
    <div>
        <div class="flex-center padding"><layout-logo /></div>
        <el-card class="container">
            <div>{{errors[""]}}</div>
            <el-form ref="formRef" size="large" :model="model" label-width="240px" :rules="rules" :action="action" method="post">
                <template v-for="(value,key,index) in model">
                    <el-form-item :label="getMeta(key).title" :prop="key" :error="errors[key]">
                        <el-input v-model="model[key]" v-if="getType(key).match(/^password$/i)" type="password" clearable />
                        <el-switch v-model="model[key]" v-else-if="getType(key).match(/^boolean/i)" clearable />
                        <el-date-picker v-model="model[key]" v-else-if="getType(key).match(/^dateTimeOffset/i)" value-format="YYYY-MM-DDTHH:mm:ss.SSSZ" type="datetime" clearable />
                        <el-date-picker v-model="model[key]" v-else-if="getType(key).match(/^date/i)" type="date" clearable />
                        <el-date-picker v-model="model[key]" v-else-if="getType(key).match(/^time/i)" type="time" clearable />
                        <el-input v-model="model[key]" v-else clearable />
                    </el-form-item>
                    <input type="hidden" v-model="model[key]" />
                </template>
            </el-form>
            <el-button type="primary" class="width100" v-on:click="submitForm(formRef)">@T("Confirm")</el-button>
        </el-card>
        <div class="flex-center padding"> <layout-footer /></div>
    </div>
</div>
@using (Html.BeginForm())
{
    @Html.EditorForModel()
    <input type="submit" value="submit">
}
@section script{
    <script type="module" id="page">
        import { ref, reactive } from 'vue';
        import SvgIcon from '/components/svg-icon.js';
        import { post } from '/utils/request.js';
        import validators from '/utils/validators.js';
        export default {
            components: { SvgIcon },
            setup() {
                console.log('@action');
                const action = "@action";
                const requestToken = '@requestToken';
                const formRef = ref(null);
                const model = reactive(@Html.Raw(Json.Serialize(Model)));
                const errors = reactive(@Html.Raw(Json.Serialize(ViewData.ModelState.ToErrors())));
                const schema = reactive(@Html.Raw(Json.Serialize(ViewData.ModelMetadata.GetSchema(ViewContext.HttpContext.RequestServices))));
                const getMeta = (name) => schema.properties[name];
                const getType = (name) => {
                    const meta = getMeta(name);
                    return meta.template ?? meta.format ?? meta.type;
                };
                const getRules = (schema) => {
                    let rules = {};
                    for (let key in schema.properties) {

                        const prop = schema.properties[key];
                        if (prop.rules) {
                            let propRules = prop.rules;
                            propRules.map(o => {
                                if (o.validator) {
                                    o.validator = (validators[o.validator])(model);
                                }
                                return o;
                            });
                            rules[key] = prop.rules;
                        }
                    }
                    console.error(rules);
                    return rules;
                };
                const rules = reactive(getRules(schema));
                const submitForm = async (form) => {
                    try {
                        await form.validate();
                        const response = await post(action, model, requestToken);
                        if (response.status === 200) {
                            //for login
                            alert(200);
                        } else if (response.status == 400) {
                            alert(400);
                            Object.assign(errors, await response.json());
                        }
                        else {
                            alert(response.status);
                        }
                    } catch (e) {
                        alert(e);
                    }
                };
                return {
                    formRef,
                    action,
                    model,
                    errors,
                    schema,
                    rules,
                    getMeta,
                    getType,
                    submitForm,
                };
            }
        };
    </script>
}
